{"version":3,"sources":["Scoreboard.tsx","Buttons.tsx","Count.tsx","Input.tsx","Setting.tsx","state/coutn-reducer.ts","App.tsx","serviceWorker.ts","state/store.ts","index.tsx"],"names":["Scoreboard","props","className","count","maxValue","error","Buttons","onClick","disabled","title","Count","counter","minValue","inc","reset","Input","name","type","min","value","onChange","e","setValue","currentTarget","Setting","useState","minValueLocal","setMinValueLocal","maxValueLocal","setMaxValueLocal","useEffect","setError","set","initialState","App","useSelector","state","dispatch","useDispatch","setValueAC","Boolean","window","location","hostname","match","reducers","combineReducers","action","store","createStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"0PAmBeA,G,MAVI,SAACC,GAIhB,OAAO,6BACH,yBAAKC,UAAWD,EAAME,QAAUF,EAAMG,SAAU,WAAa,UAAWH,EAAME,OAC9E,yBAAKD,UAAU,aAAaD,EAAMI,MAAOJ,EAAMI,MAAQ,OCAhDC,EAPC,SAACL,GAEb,OAAO,4BAAQC,UAAU,SAASK,QAASN,EAAMM,QAASC,SAAUP,EAAMO,UACtEP,EAAMQ,QCiBCC,EAhBD,SAACT,GAKX,OAAO,yBAAKC,UAAU,SAClB,yBAAKA,UAAU,cACX,kBAAC,EAAD,CAAYC,MAAOF,EAAMU,QAAQC,SAAUR,SAAUH,EAAMU,QAAQP,SAAUQ,SAAUX,EAAMU,QAAQC,SAAUP,MAAOJ,EAAMI,SAEhI,yBAAKH,UAAU,eACX,kBAAC,EAAD,CAASO,MAAO,MAAOF,QAASN,EAAMY,IAAKL,SAAUP,EAAMU,QAAQC,WAAaX,EAAMU,QAAQP,UAA0B,KAAdH,EAAMI,QAChH,kBAAC,EAAD,CAASI,MAAO,QAASF,QAASN,EAAMa,MAAON,SAAUP,EAAMU,QAAQC,WAAaX,EAAMU,QAAQR,OAAuB,KAAdF,EAAMI,WCI9GU,EAlBD,SAACd,GAMX,OACI,yBAAKC,UAAU,QACX,8BAAQD,EAAMe,MACd,2BAAOC,KAAK,SACRC,IAAI,KACJC,MAAOlB,EAAMkB,MACbjB,UAAWD,EAAMI,MAAQ,aAAe,QACxCe,SAXa,SAACC,GACtBpB,EAAMqB,UAAUD,EAAEE,cAAcJ,YCqCzBK,EApCC,SAACvB,GAAqB,MAEQwB,mBAAiBxB,EAAMU,QAAQC,UAFvC,mBAE3Bc,EAF2B,KAEZC,EAFY,OAGQF,mBAAiBxB,EAAMU,QAAQC,UAHvC,mBAG3BgB,EAH2B,KAGZC,EAHY,KAOlCC,qBAAU,WACFJ,EAAgB,EAChBzB,EAAM8B,SAAS,mHAGRL,EAAgBE,EACvB3B,EAAM8B,SAAS,qHACU,IAAlBL,GAAyC,IAAlBE,EAC9B3B,EAAM8B,SAAS,qJAEf9B,EAAM8B,SAAS,MAEpB,CAACL,EAAeE,IAMnB,OAAO,yBAAK1B,UAAU,SAClB,yBAAKA,UAAU,cACX,kBAAC,EAAD,CAAOc,KAAM,YAAaG,MAAOO,EAAeJ,SAAUK,EAAkBtB,MAAOJ,EAAMI,QACzF,kBAAC,EAAD,CAAOW,KAAM,YAAaG,MAAOS,EAAeN,SAAUO,EAAkBxB,MAAOJ,EAAMI,SAE7F,yBAAKH,UAAU,eACX,kBAAC,EAAD,CAASO,MAAO,MAAOF,QAVN,WACrBN,EAAM+B,IAAIJ,EAAeF,EAAeA,IASclB,SAA0B,KAAhBP,EAAMI,W,OCtCxE4B,EAA0B,CAC5B7B,SAAU,EACVQ,SAAU,EACVT,MAAO,GCiCI+B,MAlCf,WAEE,IAAMvB,EAAUwB,aAAqC,SAACC,GAAD,OAAWA,EAAMjC,SAChEkC,EAAWC,cAHJ,EAKab,mBAAiB,IAL9B,mBAKNpB,EALM,KAKC0B,EALD,KAmBb,OACE,yBAAK7B,UAAU,OACb,kBAAC,EAAD,CACES,QAASA,EACTN,MAAOA,EACP0B,SAAUA,EACVC,IAVM,SAAC5B,EAAkBQ,EAAkBT,GAC/CkC,EDsBsB,SAACjC,EAAkBQ,EAAkBT,GAArC,MAAwD,CAC9Ec,KAAM,YACNb,WACAQ,WACAT,SC1BSoC,CAAWnC,EAAUQ,EAAUT,OAUtC,kBAAC,EAAD,CAAOU,IAnBC,WACVwB,EDsB6B,CAC7BpB,KAAM,eCJFH,MAhBN,WACEuB,EDsB+B,CAC/BpB,KAAM,iBCPFN,QAASA,EACTN,MAAOA,MCzBKmC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,WCfAC,EAAWC,YAAgB,CAC7B3C,MHcwB,WAA0D,IAAzDiC,EAAwD,uDAArCH,EAAcc,EAAuB,uCACjF,OAAQA,EAAO9B,MACX,IAAK,YACD,OAAO,eAAKmB,EAAZ,CAAmBxB,SAAUwB,EAAMxB,SAAW,IAClD,IAAK,cACD,OAAO,eAAKwB,EAAZ,CAAmBxB,SAAUwB,EAAMjC,QAEvC,IAAK,YACD,OAAO,eACAiC,EADP,CAEIxB,SAAUmC,EAAOnC,SACjBR,SAAU2C,EAAO3C,SACjBD,MAAO4C,EAAO5C,QAGtB,QACI,OAAOiC,MG1BbY,EAAQC,YAAYJ,GAEXG,IAKfP,OAAOO,MAAQA,ECPfE,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUJ,MAAOA,GACf,kBAAC,EAAD,QAGJK,SAASC,eAAe,SF6HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAxD,GACLyD,QAAQzD,MAAMA,EAAM0D,c","file":"static/js/main.bb12aa1c.chunk.js","sourcesContent":["import React from 'react';\r\n\r\ntype ScoreboardPropsType = {\r\n    count: number\r\n    maxValue: number\r\n    minValue: number\r\n    error: string\r\n}\r\n\r\nconst Scoreboard = (props:ScoreboardPropsType) => {\r\n    debugger\r\n    // const {count, error, maxValue} = props\r\n   \r\n    return <div>\r\n        <div className={props.count === props.maxValue? 'maxValue' : 'number'}>{props.count}</div>\r\n        <div className='textError'>{props.error? props.error : '' }</div>\r\n    </div>\r\n}\r\n\r\nexport default Scoreboard;","import React from 'react';\r\n\r\ntype ButtonsPropsType = {\r\n    title: string\r\n    onClick: () => void\r\n    disabled: boolean\r\n}\r\n\r\nconst Buttons = (props: ButtonsPropsType) => {\r\n\r\n    return <button className='button' onClick={props.onClick} disabled={props.disabled}>\r\n       {props.title}\r\n    </button>\r\n}\r\n\r\nexport default Buttons;\r\n","import React from 'react';\r\nimport Scoreboard from './Scoreboard';\r\nimport Buttons from './Buttons';\r\nimport { StateType } from './state/coutn-reducer';\r\n\r\ntype CountPropsType = {\r\n    inc: () => void\r\n    reset: () => void\r\n    counter: StateType\r\n    error: string\r\n}\r\n\r\nconst Count = (props: CountPropsType) => {\r\n    debugger\r\n    // const count = props.counter.count\r\n    // const maxValue = props.counter.maxValue\r\n    // const minValue = props.counter.minValue\r\n    return <div className='count'>\r\n        <div className='displaying'>\r\n            <Scoreboard count={props.counter.minValue} maxValue={props.counter.maxValue} minValue={props.counter.minValue} error={props.error}/>\r\n        </div>\r\n        <div className='displaying1'>\r\n            <Buttons title={'inc'} onClick={props.inc} disabled={props.counter.minValue === props.counter.maxValue || props.error!==''}/>\r\n            <Buttons title={'reset'} onClick={props.reset} disabled={props.counter.minValue === props.counter.count || props.error!==''}/>\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default Count;","import React, { ChangeEvent } from 'react';\r\n\r\ntype PropsType = {\r\n    name: string\r\n    value: number\r\n    error: string\r\n    setValue: (number: number) => void\r\n}\r\n\r\nconst Input = (props: PropsType) => {\r\n    // const { name, setValue, value, error } = props\r\n    const onChangeHeandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        props.setValue(+e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div className='item'>\r\n            <span >{props.name}</span>\r\n            <input type=\"number\"\r\n                min='-1'\r\n                value={props.value}\r\n                className={props.error ? 'inputError' : 'input'}\r\n                onChange={onChangeHeandler} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Input;","import React, { useState, useEffect } from 'react';\r\nimport Buttons from './Buttons';\r\nimport Input from './Input';\r\nimport { StateType } from './state/coutn-reducer';\r\n\r\ntype PropsRype = {\r\n    counter: StateType\r\n    set: (maxValue: number, minValue: number, count: number) => void\r\n    error: string\r\n    setError: (error: string) => void\r\n    \r\n}\r\n\r\nconst Setting = (props: PropsRype) => {\r\n    debugger\r\n    const [minValueLocal, setMinValueLocal] = useState<number>(props.counter.minValue);\r\n    const [maxValueLocal, setMaxValueLocal] = useState<number>(props.counter.minValue);\r\n    // const minValue = props.counter.minValue\r\n    // const maxValue = props.counter.minValue\r\n\r\n    useEffect(() => {\r\n        if (minValueLocal < 0) {\r\n            props.setError('min не может быть меньше 0')\r\n        // } else if (minValueLocal === maxValueLocal) {\r\n        //     props.setError('min не может быть равен max')\r\n        } else if (minValueLocal > maxValueLocal) {\r\n            props.setError('min не может быть больше max')\r\n        } else if (minValueLocal === 0 && maxValueLocal === 0) {\r\n            props.setError('введите значения и нажмите set')\r\n        } else {\r\n            props.setError('')\r\n        }\r\n    }, [minValueLocal, maxValueLocal])\r\n\r\n    const onChangeHeandler = () => {\r\n        props.set(maxValueLocal, minValueLocal, minValueLocal )\r\n    }\r\n\r\n    return <div className='count'>\r\n        <div className='displaying'>\r\n            <Input name={'min value'} value={minValueLocal} setValue={setMinValueLocal} error={props.error} />\r\n            <Input name={'max value'} value={maxValueLocal} setValue={setMaxValueLocal} error={props.error} />\r\n        </div>\r\n        <div className='displaying1'>\r\n            <Buttons title={'set'} onClick={onChangeHeandler} disabled={props.error !== ''} />\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default Setting;","export type StateType = {\r\n    maxValue: number;\r\n    minValue: number;\r\n    count: number;\r\n}\r\n\r\nconst initialState: StateType = {\r\n    maxValue: 0,\r\n    minValue: 0,\r\n    count: 0\r\n}\r\n\r\ntype incValueType = ReturnType<typeof incValueAC>\r\ntype resetValueType = ReturnType<typeof resetValueAC>\r\ntype setValueType = ReturnType<typeof setValueAC>\r\n\r\ntype ActionType = incValueType | resetValueType | setValueType\r\n\r\nexport const countReducer = (state: StateType = initialState, action: ActionType) => {\r\n    switch (action.type) {\r\n        case 'INC-VALUE':     \r\n            return { ...state, minValue: state.minValue + 1 }\r\n        case 'RESET-VALUE':\r\n            return { ...state, minValue: state.count };\r\n\r\n        case \"SET-VALUE\": {\r\n            return {\r\n                ...state,\r\n                minValue: action.minValue,\r\n                maxValue: action.maxValue,\r\n                count: action.count\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const incValueAC = () => ({\r\n    type: 'INC-VALUE'\r\n} as const)\r\n\r\nexport const resetValueAC = () => ({\r\n    type: 'RESET-VALUE',\r\n} as const)\r\n\r\nexport const setValueAC = (maxValue: number, minValue: number, count: number) => ({\r\n    type: 'SET-VALUE',\r\n    maxValue,\r\n    minValue,\r\n    count\r\n}as const )","import React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport './App.css';\nimport Count from './Count';\nimport Setting from './Setting';\nimport { incValueAC, resetValueAC, setValueAC, StateType } from './state/coutn-reducer';\nimport { AppStoreType } from './state/store';\n\nfunction App() {\n  debugger\n  const counter = useSelector<AppStoreType, StateType>((state) => state.count)\n  const dispatch = useDispatch()\n  \n  const [error, setError] = useState<string>('')\n\n  const inc = () => {\n    dispatch(incValueAC())\n  }\n\n  function reset() {\n    dispatch(resetValueAC())\n  }\n\n  const set = (maxValue: number, minValue: number, count: number) => {\n    dispatch(setValueAC(maxValue, minValue, count))\n  }\n\n  return (\n    <div className=\"app\">\n      <Setting \n        counter={counter}\n        error={error}\n        setError={setError}\n        set={set} />\n      <Count inc={inc}\n        reset={reset}\n        counter={counter}\n        error={error} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { combineReducers, createStore } from 'redux';\r\nimport {countReducer} from './coutn-reducer';\r\n\r\nconst reducers = combineReducers({\r\n    count: countReducer,\r\n\r\n});\r\n\r\nconst store = createStore(reducers);\r\n\r\nexport default store\r\n\r\nexport type AppStoreType = ReturnType<typeof reducers>\r\n\r\n//@ts-ignore\r\nwindow.store = store; ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport store from './state/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}