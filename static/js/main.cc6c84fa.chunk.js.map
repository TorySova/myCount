{"version":3,"sources":["Scoreboard.tsx","Buttons.tsx","Count.tsx","Input.tsx","Setting.tsx","App.tsx","serviceWorker.ts","state/coutn-reducer.ts","state/store.ts","index.tsx"],"names":["Scoreboard","props","count","error","maxValue","className","Buttons","onClick","disabled","title","Count","minValue","inc","reset","Input","name","setValue","value","type","min","onChange","e","currentTarget","Setting","setError","setMaxValue","setCount","setMinValue","useState","minValueLocal","setMinValueLocal","maxValueLocal","setMaxValueLocal","useEffect","localStorage","setItem","toString","App","Number","getItem","Boolean","window","location","hostname","match","initialState","reducers","combineReducers","state","action","store","createStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.cc6c84fa.chunk.js","sourcesContent":["import React from 'react';\r\n\r\ntype ScoreboardPropsType = {\r\n    count: number\r\n    maxValue: number\r\n    error: string\r\n}\r\n\r\nconst Scoreboard = (props:ScoreboardPropsType) => {\r\n    const {count, error, maxValue} = props\r\n    return <>\r\n        <div className={count === maxValue? 'maxValue' : 'number'}>{count}</div>\r\n        <div className='textError'>{error? error : '' }</div>\r\n    </>\r\n}\r\n\r\nexport default Scoreboard;","import React from 'react';\r\n\r\ntype ButtonsPropsType = {\r\n    title: string\r\n    onClick: () => void\r\n    disabled: boolean\r\n}\r\n\r\nconst Buttons = (props: ButtonsPropsType) => {\r\n\r\n    return <button className='button' onClick={props.onClick} disabled={props.disabled}>\r\n       {props.title}\r\n    </button>\r\n}\r\n\r\nexport default Buttons;\r\n","import React from 'react';\r\nimport Scoreboard from './Scoreboard';\r\nimport Buttons from './Buttons';\r\n\r\ntype CountPropsType = {\r\n    inc: () => void\r\n    reset: () => void\r\n    minValue: number\r\n    maxValue: number\r\n    count: number\r\n    error: string\r\n}\r\n\r\nconst Count = (props: CountPropsType) => {\r\n\r\n    return <div className='count'>\r\n        <div className='displaying'>\r\n            <Scoreboard count={props.minValue } maxValue={props.maxValue} error={props.error}/>\r\n        </div>\r\n        <div className='displaying1'>\r\n            <Buttons title={'inc'} onClick={props.inc} disabled={props.minValue === props.maxValue || props.error!==''}/>\r\n            <Buttons title={'reset'} onClick={props.reset} disabled={props.minValue === props.count || props.error!==''}/>\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default Count;","import React, { ChangeEvent } from 'react';\r\n\r\ntype PropsType = {\r\n    name: string\r\n    value: number\r\n    setValue: (valeu: number) => void\r\n    error: string\r\n}\r\n\r\nconst Input = (props: PropsType) => {\r\n    const { name, setValue, value, error } = props\r\n    const onChangeHeandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setValue(+e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div className='item'>\r\n            <span >{name}</span>\r\n            <input type=\"number\"\r\n                min='-1'\r\n                value={value}\r\n                className={error ? 'inputError' : 'input'}\r\n                onChange={onChangeHeandler} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Input;","import React, { useState, useEffect } from 'react';\r\nimport Buttons from './Buttons';\r\nimport Input from './Input';\r\n\r\ntype PropsRype = {\r\n    setCount: (value: number) => void\r\n    setMaxValue: (value: number) => void\r\n    count: number\r\n    maxValue: number\r\n    error: string\r\n    setError: (error: string) => void\r\n    setMinValue: (value: number) => void\r\n    minValue: number\r\n}\r\n\r\nconst Setting = (props: PropsRype) => {\r\n    const { error, maxValue,  minValue, setError, setMaxValue, setCount, setMinValue } = props\r\n\r\n    const [minValueLocal, setMinValueLocal] = useState<number>(minValue);\r\n    const [maxValueLocal, setMaxValueLocal] = useState<number>(maxValue);\r\n\r\n\r\n    useEffect(() => {\r\n        if (minValueLocal < 0) {\r\n            setError('min не может быть меньше 0')\r\n        } else if (minValueLocal === maxValueLocal) {\r\n            setError('min не может быть равен max')\r\n        } else if (minValueLocal > maxValueLocal) {\r\n            setError('min не может быть больше max')\r\n        } else {\r\n            setError('')\r\n        }\r\n    }, [minValueLocal, maxValueLocal])\r\n\r\n    const onChangeHeandler = () => {\r\n        localStorage.setItem('minValue', minValueLocal.toString() )\r\n        localStorage.setItem('maxValue', maxValueLocal.toString() )\r\n\r\n        setMaxValue(maxValueLocal)\r\n        setCount(minValueLocal)\r\n        setMinValue(minValueLocal)\r\n    }\r\n\r\n    return <div className='count'>\r\n        <div className='displaying'>\r\n            <Input name={'min value'} value={minValueLocal} setValue={setMinValueLocal} error={error} />\r\n            <Input name={'max value'} value={maxValueLocal} setValue={setMaxValueLocal} error={error} />\r\n        </div>\r\n        <div className='displaying1'>\r\n            <Buttons title={'set'} onClick={onChangeHeandler} disabled={error !== ''} />\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default Setting;","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport Count from './Count';\nimport Setting from './Setting';\n\nfunction App() {\n\n  const [count, setCount] = useState<number>(0)\n  const [minValue, setMinValue] = useState<number>(Number(localStorage.getItem('minValue')))\n  const [maxValue, setMaxValue] = useState<number>(Number(localStorage.getItem('maxValue')))\n  const [error, setError] = useState<string>('')\n\n\n  // useEffect(() => {\n  //   const stateAsString = localStorage.getItem('minValue')\n  //   if (stateAsString) {\n  //     const state = JSON.parse(stateAsString)\n  //   }\n\n\n  // }, [])\n\n  const inc = () => {\n    if (count < maxValue) {\n      setMinValue(minValue + 1)\n    }\n  }\n\n  function reset() {\n    setMinValue(count)\n  }\n\n  return (\n    <div className=\"app\">\n      <Setting setCount={setCount}\n        setMaxValue={setMaxValue}\n        count={count}\n        maxValue={maxValue}\n        error={error}\n        setError={setError}\n        setMinValue={setMinValue}\n        minValue={minValue} />\n      <Count inc={inc}\n        reset={reset}\n        minValue={minValue}\n        maxValue={maxValue}\n        count={count}\n        error={error} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","type StateType = typeof initialState\r\n\r\nconst initialState = {\r\n    maxValue: 0,\r\n    minValue: 0,\r\n    error: '',\r\n    count: 0\r\n}\r\n\r\ntype ActionType = incValueType | resetValueType\r\n\r\ntype incValueType = {\r\n    type: string;\r\n}\r\n\r\ntype resetValueType = {\r\n    type: string;\r\n}\r\n\r\nexport const countReducer = (state: StateType = initialState, action: ActionType) => {\r\n    switch (action.type) {\r\n        case 'INC-VALUE':\r\n\r\n        \r\n            return { ...state, minValue: state.minValue + 1 };\r\n        case 'RESET-VALUE':\r\n            return { ...state, minValue: state.minValue };\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const incValueAC = (): incValueType => ({\r\n    type: 'INC-VALUE'\r\n})\r\n\r\nexport const resetValueAC = (): resetValueType => ({\r\n    type: 'RESET-VALUE',\r\n})","import { combineReducers, createStore } from 'redux';\r\nimport {countReducer} from './coutn-reducer';\r\n\r\nconst reducers = combineReducers({\r\n    count: countReducer,\r\n\r\n});\r\n\r\nconst store = createStore(reducers);\r\n\r\nexport default store\r\n\r\nexport type AppStoreType = ReturnType<typeof reducers>\r\n\r\n//@ts-ignore\r\nwindow.store = store; ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport store from './state/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}